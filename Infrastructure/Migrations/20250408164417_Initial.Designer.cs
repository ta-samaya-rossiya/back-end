// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(MapDbContext))]
    [Migration("20250408164417_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.HighlightedRegionInRoute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uuid")
                        .HasColumnName("region_id");

                    b.Property<Guid>("RouteId")
                        .HasColumnType("uuid")
                        .HasColumnName("route_id");

                    b.HasKey("Id")
                        .HasName("pk_highlighted_region_in_routes");

                    b.HasIndex("RegionId")
                        .HasDatabaseName("ix_highlighted_region_in_routes_region_id");

                    b.HasIndex("RouteId")
                        .HasDatabaseName("ix_highlighted_region_in_routes_route_id");

                    b.ToTable("highlighted_region_in_routes", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.HistoricalRoute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("ImagePath")
                        .HasColumnType("text")
                        .HasColumnName("image_path");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_historical_routes");

                    b.ToTable("historical_routes", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Region", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Polygon>("Geometry")
                        .IsRequired()
                        .HasColumnType("geometry (polygon)")
                        .HasColumnName("geometry");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_regions");

                    b.ToTable("regions", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.RoutePoint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AreaDescription")
                        .HasColumnType("text")
                        .HasColumnName("area_description");

                    b.Property<Point>("Coordinates")
                        .IsRequired()
                        .HasColumnType("geometry")
                        .HasColumnName("coordinates");

                    b.Property<string>("HistoricalDescription")
                        .HasColumnType("text")
                        .HasColumnName("historical_description");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<Guid>("RouteId")
                        .HasColumnType("uuid")
                        .HasColumnName("route_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_route_points");

                    b.HasIndex("RouteId")
                        .HasDatabaseName("ix_route_points_route_id");

                    b.ToTable("route_points", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.HighlightedRegionInRoute", b =>
                {
                    b.HasOne("Domain.Entities.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_highlighted_region_in_routes_regions_region_id");

                    b.HasOne("Domain.Entities.HistoricalRoute", "Route")
                        .WithMany()
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_highlighted_region_in_routes_historical_routes_route_id");

                    b.Navigation("Region");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("Domain.Entities.RoutePoint", b =>
                {
                    b.HasOne("Domain.Entities.HistoricalRoute", "Route")
                        .WithMany()
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_route_points_historical_routes_route_id");

                    b.Navigation("Route");
                });
#pragma warning restore 612, 618
        }
    }
}
