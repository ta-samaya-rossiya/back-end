// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(MapDbContext))]
    partial class MapDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.HistoricalLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_at");

                    b.Property<string>("LineColor")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("line_color");

                    b.Property<int>("LineStyle")
                        .HasColumnType("integer")
                        .HasColumnName("line_style");

                    b.Property<string>("MarkerImagePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("marker_image_path");

                    b.Property<string>("MarkerLegend")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("marker_legend");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_historical_lines");

                    b.ToTable("historical_lines", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.HistoricalObject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Point>("Coordinates")
                        .IsRequired()
                        .HasColumnType("geometry")
                        .HasColumnName("coordinates");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("ImagePath")
                        .HasColumnType("text")
                        .HasColumnName("image_path");

                    b.Property<Guid>("LineId")
                        .HasColumnType("uuid")
                        .HasColumnName("line_id");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<string>("VideoUrl")
                        .HasColumnType("text")
                        .HasColumnName("video_url");

                    b.HasKey("Id")
                        .HasName("pk_route_objects");

                    b.HasIndex("LineId")
                        .HasDatabaseName("ix_route_objects_line_id");

                    b.ToTable("route_objects", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Region", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Polygon>("Border")
                        .IsRequired()
                        .HasColumnType("geometry (polygon)")
                        .HasColumnName("border");

                    b.Property<string>("DisplayTitle")
                        .HasColumnType("text")
                        .HasColumnName("display_title");

                    b.Property<int>("DisplayTitleFontSize")
                        .HasColumnType("integer")
                        .HasColumnName("display_title_font_size");

                    b.Property<Point>("DisplayTitlePosition")
                        .IsRequired()
                        .HasColumnType("geometry")
                        .HasColumnName("display_title_position");

                    b.Property<string>("FillColor")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("fill_color");

                    b.Property<bool>("IsRussia")
                        .HasColumnType("boolean")
                        .HasColumnName("is_russia");

                    b.Property<bool>("ShowDisplayTitle")
                        .HasColumnType("boolean")
                        .HasColumnName("show_display_title");

                    b.Property<bool>("ShowIndicators")
                        .HasColumnType("boolean")
                        .HasColumnName("show_indicators");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_regions");

                    b.ToTable("regions", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.RegionInLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<Guid>("LineId")
                        .HasColumnType("uuid")
                        .HasColumnName("line_id");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uuid")
                        .HasColumnName("region_id");

                    b.HasKey("Id")
                        .HasName("pk_region_in_lines");

                    b.HasIndex("LineId")
                        .HasDatabaseName("ix_region_in_lines_line_id");

                    b.HasIndex("RegionId")
                        .HasDatabaseName("ix_region_in_lines_region_id");

                    b.ToTable("region_in_lines", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.RegionIndicators", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Excursions")
                        .HasColumnType("integer")
                        .HasColumnName("excursions");

                    b.Property<string>("ImagePath")
                        .HasColumnType("text")
                        .HasColumnName("image_path");

                    b.Property<int>("Participants")
                        .HasColumnType("integer")
                        .HasColumnName("participants");

                    b.Property<int>("Partners")
                        .HasColumnType("integer")
                        .HasColumnName("partners");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uuid")
                        .HasColumnName("region_id");

                    b.HasKey("Id")
                        .HasName("pk_region_indicators");

                    b.HasIndex("RegionId")
                        .HasDatabaseName("ix_region_indicators_region_id");

                    b.ToTable("region_indicators", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.HistoricalObject", b =>
                {
                    b.HasOne("Domain.Entities.HistoricalLine", "Line")
                        .WithMany()
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_route_objects_historical_lines_line_id");

                    b.Navigation("Line");
                });

            modelBuilder.Entity("Domain.Entities.RegionInLine", b =>
                {
                    b.HasOne("Domain.Entities.HistoricalLine", "Line")
                        .WithMany()
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_region_in_lines_historical_lines_line_id");

                    b.HasOne("Domain.Entities.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_region_in_lines_regions_region_id");

                    b.Navigation("Line");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Domain.Entities.RegionIndicators", b =>
                {
                    b.HasOne("Domain.Entities.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_region_indicators_regions_region_id");

                    b.Navigation("Region");
                });
#pragma warning restore 612, 618
        }
    }
}
